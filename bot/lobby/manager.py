from dataclasses import dataclass, field
from typing import Dict, Set, Tuple


@dataclass
class Lobby:
    chat_id: int
    owner_id: int
    players: Set[int] = field(default_factory=set)
    max_players: int = 12
    is_open: bool = True

    def add(self, user_id: int) -> Tuple[bool, str]:
        if not self.is_open:
            return False, '–õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ.'
        if len(self.players) >= self.max_players:
            return False, '–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.'
        if user_id in self.players:
            return False, '–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏.'
        self.players.add(user_id)
        return True, '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏.'

    def remove(self, user_id: int) -> Tuple[bool, str]:
        if user_id not in self.players:
            return False, '–í–∞—Å –Ω–µ—Ç –≤ –ª–æ–±–±–∏.'
        self.players.remove(user_id)
        return True, '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏.'


class LobbyManager:
    def __init__(self) -> None:
        self._lobbies: Dict[int, Lobby] = {}

    def get(self, chat_id: int) -> Lobby | None:
        return self._lobbies.get(chat_id)

    def create(self, chat_id: int, owner_id: int) -> Tuple[bool, str]:
        if chat_id in self._lobbies and self._lobbies[chat_id].is_open:
            return False, '–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏.'
        lobby = Lobby(chat_id=chat_id, owner_id=owner_id)
        lobby.players.add(owner_id)
        self._lobbies[chat_id] = lobby
        return True, '–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ª–æ–±–±–∏.'

    def cancel(self, chat_id: int, by_user: int) -> Tuple[bool, str]:
        lobby = self._lobbies.get(chat_id)
        if not lobby:
            return False, '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
        if lobby.owner_id != by_user:
            return False, '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ.'
        lobby.is_open = False
        self._lobbies.pop(chat_id, None)
        return True, '–õ–æ–±–±–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.'

    def start(self, chat_id: int, by_user: int) -> Tuple[bool, str]:
        lobby = self._lobbies.get(chat_id)
        if not lobby:
            return False, '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
        if lobby.owner_id != by_user:
            return False, '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.'
        if len(lobby.players) < 4:
            return False, '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.'
        lobby.is_open = False
        # –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        self._lobbies.pop(chat_id, None)
        return True, '–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç!'

    def list_players(self, chat_id: int) -> str:
        lobby = self._lobbies.get(chat_id)
        if not lobby:
            return '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
        if not lobby.players:
            return '–í –ª–æ–±–±–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.'
        lines = [f'–ò–≥—Ä–æ–∫–æ–≤: {len(lobby.players)}/{lobby.max_players}']
        for i, uid in enumerate(lobby.players, start=1):
            mark = 'üëë' if uid == lobby.owner_id else '‚Ä¢'
            lines.append(f'{i}. {mark} {uid}')
        return '\n'.join(lines)


lobbies = LobbyManager()
